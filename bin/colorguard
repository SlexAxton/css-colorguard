#!/usr/bin/env node
var argv = require('yargs').argv;
var fs = require('fs');
var path = require('path');
var stdin = process.stdin;
var stdout = process.stdout;
var stderr = process.stderr;

process.title = 'colorguard';

var colorguard = require('..');
var css = [];
var options,
    dirFiles;

if (argv.folder) {
  dirFiles = getCssFiles(argv.folder);
  dirFiles.forEach(function(fileName) {
    var filePath = argv.folder + fileName;
    css = css.concat(getFileContents(argv.folder + fileName));
  });

  run(css.join());
}
else if (argv.file) {
  css = getFileContents(argv.file);
  run(css);
}
else {
  stdin.setEncoding('utf8');

  stdin.on('data', function(chunk) {
    css.push(chunk);
  });

  stdin.on('end', function() {
    css = css.join();
    run(css);
  });
}

function getCssFiles(dirpath) {
  var files = fs.readdirSync(path.resolve(process.cwd(), dirpath), 'utf8');
  return files.filter(function(fileName) {
    return fileName.split('.')[1] === 'css';
  });
}

function getFileContents(dirpath) {
  return fs.readFileSync(path.resolve(process.cwd(), dirpath), 'utf8');
}

function run(css) {
  if (argv.options) {
    options = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), argv.options), 'utf8'));
  }
  else {
    options = {
      threshold: argv.threshold,
    };
  }

  var output;

  try {
    output = colorguard.inspect(css, options);
  }
  catch (e) {
    stderr.write('There was an error processing the CSS.\n' + e.toString() + '\n');
    return;
  }

  if (argv.format && argv.format.toLowerCase() === 'json') {
    stdout.write(JSON.stringify(output) + '\n');
  }
  else {
    if (!output.collisions.length) {
      stdout.write('There are no collisions.\n');
    }
    else {
      output.collisions.forEach(function(collision) {
        var pair = collision.colors.map(function(color){ return color.rgb; });
        stdout.write('Collision: ' + pair.join(', ') + '\n  - ' + collision.message + '\n');
      });
    }
  }
}
